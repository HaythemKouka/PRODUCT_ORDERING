
 
type User {
  id: ID!
  name: String!
  email: String!
  addresses: [Address]
  orders: [Order]
}

type Product {
  id: ID!
  name: String!
  description: String
  price: Float!
  category: Category
  orderItems: [OrderItem]
}

type Category {
  id: ID!
  name: String!
  products: [Product]
}

type Order {
  id: ID!
  user: User
  orderItems: [OrderItem]
  totalAmount: Float
}
  
type OrderItem {
  id: ID!
  order: Order
  product: Product
  quantity: Int!
}

type Address {
  id: ID!
  street: String!
  city: String!
  zipCode: String!
  user: User
}

type Query {
  users: [User]
  user(id: ID!): User

  products: [Product]
  product(id: ID!): Product

  categories: [Category]
  category(id: ID!): Category

  orders: [Order]
  order(id: ID!): Order

  orderItems: [OrderItem]
  orderItem(id: ID!): OrderItem

  addresses: [Address]
  address(id: ID!): Address
}

type Mutation {
  createUser(name: String!, email: String!): User
  updateUser(id: ID!, name: String!, email: String!): User
  deleteUser(id: ID!): Boolean
  
  
  createProduct(name: String!, description: String, price: Float!, categoryId: ID): Product
  updateProduct(id: ID!, name: String!, price: Float!, categoryId: ID!): Product
  deleteProduct(id: ID!): Boolean

  createCategory(name: String!): Category

  createOrder(userId: ID!, orderItemIds: [ID!]!): Order

  createOrderItem(orderId: ID!, productId: ID!, quantity: Int!): OrderItem

  createAddress(street: String!, city: String!, zipCode: String!, userId: ID!): Address
  deleteAddress(id: ID!): Boolean
  updateAddress(  id: ID!,street: String!, city: String!, country: String): Address
  updateCategory(id: ID!, name: String!): Category
  deleteCategory(id: ID!): Boolean
  
  
}
